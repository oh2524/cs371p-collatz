        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:// ------------
        -:   22:// collatz_read
        -:   23:// ------------
        -:   24:
function _Z12collatz_readRKSs called 10 returned 100% blocks executed 70%
       10:   25:pair<int, int> collatz_read (const string& s) {
       10:   26:    istringstream sin(s);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        -:   27:    int i;
        -:   28:    int j;
       10:   29:    sin >> i >> j;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
       10:   30:    return make_pair(i, j);}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        -:   31:
        -:   32:// ------------
        -:   33:// collatz_eval
        -:   34:// ------------
        -:   35:
function _Z12collatz_evalii called 16 returned 100% blocks executed 100%
       16:   36:int collatz_eval (int i, int j) {
        -:   37:    if(j < i)
       16:   38:    {
        -:   39:	int temp = i;
        -:   40:	i = j;
        -:   41:	j = temp;
        -:   42:    }
        -:   43:    assert(i > 0);
function _Z13collatz_printRSoiii called 10 returned 100% blocks executed 100%
       10:   44:    assert(j < 1000000);
       10:   45:    assert(i != j);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   46:
        -:   47:    int max_cycle = 1;
        -:   48:    for (int x = i; x <= j; x++)
        -:   49:    {
        -:   50:    	int temp_cycle = 1;
function _Z13collatz_solveRSiRSo called 2 returned 100% blocks executed 73%
        2:   51:	while (x != 1)
        2:   52:	{
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
       12:   53:		if (x%2 == 0)		// even
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
        8:   54:			x = x/2;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        8:   55:		else			// odd
        8:   56:			x = 3*x + 1;
        8:   57:		temp_cycle++;
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 2 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 2 returned 100% blocks executed 100%
       16:   58:	}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -:   59:
        -:   60:	if (temp_cycle > max_cycle)
        -:   61:		max_cycle = temp_cycle;
        -:   62:    }
        -:   63:    assert(max_cycle >= 1);
        -:   64:    return max_cycle;
        -:   65:}
        -:   66:
        -:   67:// -------------
        -:   68:// collatz_print
        -:   69:// -------------
        -:   70:
        -:   71:void collatz_print (ostream& w, int i, int j, int v) {
        -:   72:    w << i << " " << j << " " << v << endl;}
        -:   73:
        -:   74:// -------------
        -:   75:// collatz_solve
        -:   76:// -------------
        -:   77:
        -:   78:void collatz_solve (istream& r, ostream& w) {
        -:   79:    string s;
        -:   80:    while (getline(r, s)) {
        -:   81:        const pair<int, int> p = collatz_read(s);
        -:   82:        const int            i = p.first;
        -:   83:        const int            j = p.second;
        -:   84:        const int            v = collatz_eval(i, j);
        -:   85:        collatz_print(w, i, j, v);}}
